{"description": "Nelson is an array programming language providing a powerful open computing environment for\nengineering and scientific applications using modern C/C++ libraries (Boost, Eigen, \u2026)\nand others state of art numerical libraries.\n\nIt has sophisticated data structures (including cell, struct, linear systems, \u2026),\nan interpreter and a high level programming language.\n\nNelson has been developed to be an open/modular system where an user can define\nthese own data types and operations on these data types by using overload.\n\n![Nelson environment](https://github.com/nelson-lang/nelson-website/blob/master/images/Nelson-windows.png?raw=true)\n\n## Features\n\n- Types managed by Nelson:\n\n  - double and double complex: scalar, vector, matrix 2D, N dimensions array, sparse matrix.\n  - single and single complex: scalar, vector, matrix 2D, N dimensions array, sparse matrix.\n  - logical: scalar, vector, matrix 2D, N dimensions array, sparse matrix.\n  - character array (UNICODE supported).\n  - string array (UNICODE supported).\n  - integers 8, 16, 32, 64 signed and unsigned: scalar, vector, matrix 2D, N dimensions array.\n  - handle objects.\n\n- 2D and 3D plotting with high-level plot commands.\n\n- `OpenMP` and `SIMD` extensions used.\n\n- Fast Fourrier Transformation functions based on FFTW and MKL wrapper.\n\n- SLICOT (Subroutine Library in Systems and Control Theory) interfaces (optional).\n\n- Message Passing Interface (MPI): functions for parallel computing.\n\n- JSON decode/encode data support.\n\n- HDF5 high-level functions I/O,\n\n- HDF5 used as default data file format (.nh5) load/save workspace,\n\n- MAT-file compatible load/save workspace,\n\n- Foreign Function Interface C/Fortran.\n\n- Interfacing C/C++ or Fortran with Nelson (build and load external code on the fly).\n\n- MEX C API compatibility.\n\n- Nelson Engine API for C (compatible with MEX Engine). Call Nelson from your C code as engine.\n\n- RESTful API web service.\n\n- Inter-process communication between Nelson's process.\n\n- The QML engine enables nelson programs to display and manipulate graphical content using Qt's QML framework.\n\n- Component Object Model (COM) client interface: binary-interface standard for software components on Windows.\n\n- Write/Read xlsx files on Windows using COM.\n\n- Embedded Nelson code editor.\n\n- Help engine:\n\n  Generate help files using Nelson dedicated functions.\n  View your generated help files as html, markdown, pdf, gitbook or directly in Nelson help viewer.\n\n- Tests engine:\n\n  Validate your algorithm using Nelson dedicated functions.\n  Export the test results under the xUnit reports format.\n\n- Profiling and Code coverage tools for Nelson's language:\n\n  Nelson has a built-in profiler that is very useful to profile your code and find out what script or function is taking the most time.\n\n- [Nelson cloud](https://www.npmjs.com/package/nelson-cloud):\n  Instant access to Nelson anywhere from an web browser.\n\n- Module skeleton to extend Nelson available here:\n\n  - [template macros and builtin](https://github.com/nelson-lang/module_skeleton),\n  - [basic template macros only](https://github.com/nelson-lang/module_skeleton_basic).\n\n- Nelson Modules Manager (nmm) : package manager for Nelson\n\n\nAuthor(s): Allan CORNET (https://github.com/nelson-lang)", "updated": "2024-03-22T22:18:29Z", "galleryUrl": "https://community.chocolatey.org/packages/nelson/1.2.0.3744", "abuseUrl": "https://community.chocolatey.org/package/ReportAbuse/nelson/1.2.0.3744", "licenseUrl": "https://raw.githubusercontent.com/nelson-lang/nelson/master/lgpl-3.0.md", "packageName": "nelson", "displayName": "nelson", "summary": "Let's Nelson! matrix language for engineering and scientific application", "version": "1.2.0.3744", "icon": "https://raw.githubusercontent.com/nelson-lang/nelson/master/desktop/icons/hicolor/256x256/apps/nelson.png", "author": "Nelson numerical software", "downloadCount": 763, "tags": ["nelson", "development", "science", "education", "matrix"]}