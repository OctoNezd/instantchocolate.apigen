{"description": "VisualVM is a visual tool integrating commandline JDK tools and lightweight profiling capabilities.\nDesigned for both development and production time use.\n\n## Features\n\nVisualVM monitors and troubleshoots applications running on Java 1.4+ from many vendors using various technologies including jvmstat, JMX, Serviceability Agent (SA) and Attach API.\n\nVisualVM perfectly fits all the requirements of application developers, system administrators, quality engineers and end users.\n\n### Display Local And Remote Java Processes\n\n![Features 1](https://visualvm.github.io/images/features_1.png)\n\nVisualVM automatically detects and lists locally and remotely running Java applications (jstatd must be running on the remote host). You can also define applications manually by JMX connection.\n\n### Display Process Configuration And Environment\n\n![Features 2](https://visualvm.github.io/images/features_2.png)\n\nFor each process VisualVM shows basic runtime information: PID, main class, arguments passed to java process, JVM version, JDK home, JVM flags and arguments and System properties.\n\n### Monitor Process Performance And Memory\n\n![Features 3](https://visualvm.github.io/images/features_3.png)\n\nVisualVM monitors application CPU usage, GC activity, heap and metaspace / permanent generation memory, number of loaded classes and running threads.\n\n### Visualize Process Threads\n\n![Features 4](https://visualvm.github.io/images/features_4.png)\n\nAll threads running in a Java process are displayed in a timeline together with aggregated Running, Sleeping, Wait, Park and Monitor times.\n\n### Profile Performance And Memory Usage\n\n![Features 5](https://visualvm.github.io/images/features_5.png)\n\nVisualVM provides basic profiling capabilities for analyzing application performance and memory management. Both sampling and instrumentation profilers are available.\n\n### Take And Display Thread Dumps\n\n![Features 6](https://visualvm.github.io/images/features_6.png)\n\nVisualVM takes and displays thread dumps for an immediate insight of what is going on in the target process. Simultaneous thread dumps of multiple processes help to discover distributed deadlocks.\n\n### Take And Browse Heap Dumps\n\n![Features 7](https://visualvm.github.io/images/features_7.png)\n\nVisualVM creates and views .hprof memory snapshots created on demand or on OutOfMemoryError to help with uncovering inefficient heap usage and debugging memory leaks.\n\n### Analyze Core Dumps\n\n![Features 8](https://visualvm.github.io/images/features_8.png)\n\nVisualVM is able to read basic information about the crashed Java process and its environment from a core dump as well as extract and open the contained thread and heap dumps.\n\n### Analyze Applications Offline\n\n![Features 9](https://visualvm.github.io/images/features_9.png)\n\nVisualVM is able to save application configuration and runtime environment together with all taken thread dumps, heap dumps and profiler snaphots into a single application snapshot which can be later processed offline.", "updated": "2024-03-22T08:48:51Z", "galleryUrl": "https://community.chocolatey.org/packages/VisualVM/2.1.6", "abuseUrl": "https://community.chocolatey.org/package/ReportAbuse/VisualVM/2.1.6", "licenseUrl": "https://www.gnu.org/licenses/old-licenses/gpl-2.0.html", "packageName": "VisualVM", "displayName": "visualvm (Install)", "summary": "VisualVM is a visual tool integrating commandline JDK tools and lightweight profiling capabilities.\nDesigned for both development and production time use.", "version": "2.1.6", "icon": "https://visualvm.github.io/images/visualvm_logo_small.png", "author": "Oracle", "downloadCount": 1100, "tags": ["visualvm", "java", "jdk"]}