{"description": "Programming languages are limited to relatively few characters. As a result, combined character operators surfaced quite early, such as the widely used arrow (`->`), comprised of a hyphen and greater sign. It looks like an arrow if you know the analogy and squint a bit.\n\nComposite glyphs are problematic in languages such as Haskell which utilize these complicated operators (`=>` `-<` `>>=` etc.) extensively. The readability of such complex code improves with pretty printing. Academic articles featuring Haskell code often use [lhs2tex](https://www.andres-loeh.de/lhs2tex/) to achieve an appealing rendering, but it is of no use when programming.\n\nSome Haskellers have resorted to Unicode symbols (`\u21d2`, `\u2190` _etc._), which are valid in the <span style=\"font-variant: small-caps\">ghc</span>. However they are one-character-wide and therefore eye-strainingly small. Furthermore, when displayed as substitutes to the underlying multi-character representation, as [vim2hs] (https://github.com/dag/vim2hs) does, the characters go out of alignment.\n\nHasklig solves the problem the way typographers have always solved ill-fitting characters which co-occur often: [ligatures](https://en.wikipedia.org/wiki/Typographic_ligature). The underlying code stays the same \u2014 only the representation changes.\n\nNot only can multi-character glyphs be rendered more vividly, other problematic things in monospaced fonts, such as spacing can be corrected.", "updated": "2024-03-17T05:03:43Z", "galleryUrl": "https://community.chocolatey.org/packages/hasklig/1.1", "abuseUrl": "https://community.chocolatey.org/package/ReportAbuse/hasklig/1.1", "licenseUrl": "https://github.com/adobe-fonts/source-code-pro/blob/master/LICENSE.md", "packageName": "hasklig", "displayName": "hasklig", "summary": "Hasklig \u2013 Ligatures for code", "version": "1.1", "icon": "", "author": "Ian Tuomi", "downloadCount": 1978, "tags": ["hasklig", "fonts", "ligatures", "coding-fonts"]}