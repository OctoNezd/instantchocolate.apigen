{"description": "# Cortex Debug\n\n![Visual Studio Code with Cortex-Debug Installed](./images/vs-code-screenshot.png)\n\nDebugging support for ARM Cortex-M Microcontrollers with the following features:\n\n* Support J-Link, OpenOCD GDB Server\n* Partial support for PyOCD and textane/stlink (st-util) GDB Servers (SWO can only be captured via a serial port)\n* Initial support for the Black Magic Probe (This has not been as heavily tested; SWO can only be captured via a serial port)\n* Cortex Core Register Viewer\n    * In some cases the st-util GDB server can report incomplete/incorrect registers, so there may be some issues here.\n* Peripheral Register Viewer (Defined through standard SVD file)\n* SWO Decoding - \"console\" text output and binary data (signed and unsigned 32-bit integers, Q16.16 fixed point integers, single percision floating point values)\n    * The registers that are part of the DWT, TPIU, and ITM debug components will automatically be configured and do not need to be set in firmware.\n    * Firmware may still need to enable the SWO output pin - as this part of the setup is microcontroller dependant.\n    * Decoding ETM data over the SWO pin is not currently supported.\n* Support for Custom ITM Data Decoders:\n    * Ability to define JavaScript modules to decode complex data formats streamed over one or more ITM ports. Data can be printed to a output window, or sent to the graphing system.\n* Live graphing of decoded ITM data.\n* Raw Memory Viewer (\"Cortex-Debug: View Memory\" command)\n* Ability to view and step through the disassembled binary. There are three ways that disassembled code will be shown:\n    * Disassembly code will automatically be shown if it cannot locate the corresponding source code.\n    * You can manually see the disassembly for a particular function (\"Cortex-Debug: View Disassembly (Function)\" command)\n    * You can set the debugger to always show show disassembly (\"Cortex-Debug: Set Force Disassembly\" command)\n* Globals and Static scopes in the variables view\n* Initial support for Rust code (most functionality is working; disassembly views and variables view may still have issues)\n* RTOS Support (J-Link and OpenOCD - RTOS supported depends on GDB server support)\n    * As a general rule do not try to use stepping instructions before the scheduler of your RTOS has started - in many cases this tends to crash the GDB servers or leave it in an inconsistent state.\n\n\n### Planned Features\n\n* Additional Graphing Options\n* Enhanced SVD Auto-selection\n* Semihosting Support\n\n## Installation\n\nRequirements:\n\n* ARM GCC Toolchain (https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads) - provides arm-none-eabi-gdb and related tools\n* At least one of:\n    * J-Link Software Tools - provides the J-Link GDB Server for J-Link based debuggers (https://www.segger.com/downloads/jlink)\n    * OpenOCD - provides a GDB Server that can be used with a number of debuggers (http://openocd.org)\n        * NOTE: On macOS do not use the default version of OpenOCD provided by homebrew, this is not compatible with releases V0.2.4 and newer. You can either install from source using homebrew (`brew install open-ocd --HEAD`) or the packages from https://github.com/gnu-mcu-eclipse/openocd/releases will also work. Some linux versions and Windows may also need a more up-to-date version of OpenOCD from the gnu-mcu-eclipse releases.\n    * Texane's st-util GDB server - Only supports ST-Link Debug Probes (https://github.com/texane/stlink)\n    * pyOCD GDB Server - GDB server that supports the CMSIS-DAP debugger on a number of mbed boards (https://github.com/mbedmicro/pyOCD)\n    * Black Magic Probe\n\n## Usage\n\nSee https://marcelball.ca/projects/cortex-debug/ for usage information\n\n## Acknowledgments\n\nParts of this extension are based upon Jan Jurzitza's (WebFreak) code-debug extension (https://github.com/WebFreak001/code-debug). His project provided an excellent base for GDB MI parsing and interaction.", "updated": "2024-03-22T08:03:34Z", "galleryUrl": "https://community.chocolatey.org/packages/vscode-cortex-debug/0.3.1", "abuseUrl": "https://community.chocolatey.org/package/ReportAbuse/vscode-cortex-debug/0.3.1", "licenseUrl": "https://marketplace.visualstudio.com/items/marus25.cortex-debug/license", "packageName": "vscode-cortex-debug", "displayName": "vscode-cortex-debug (Install)", "summary": "Debugging support for ARM Cortex-M Microcontrollers for Visual Studio Code", "version": "0.3.1", "icon": "https://marus25.gallerycdn.vsassets.io/extensions/marus25/cortex-debug/0.3.1/1561086472617/Microsoft.VisualStudio.Services.Icons.Default", "author": "Marus", "downloadCount": 673, "tags": ["vscode-cortex-debug", "microsoft", "visualstudiocode", "vscode", "extension", "cortex-debug"]}