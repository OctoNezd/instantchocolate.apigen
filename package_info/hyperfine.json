{"description": "[![Build Status](https://travis-ci.org/sharkdp/hyperfine.svg?branch=master)](https://travis-ci.org/sharkdp/hyperfine)\n[![Build status](https://ci.appveyor.com/api/projects/status/pdqq5frgkcj0smrs/branch/master?svg=true)](https://ci.appveyor.com/project/sharkdp/hyperfine/branch/master)\n\nA command-line benchmarking tool.\n\n**Demo**: Benchmarking [`fd`](https://github.com/sharkdp/fd) and\n[`find`](https://www.gnu.org/software/findutils/):\n\n![hyperfine](https://i.imgur.com/z19OYxE.gif)\n\n## Features\n\n* Statistical analysis across multiple runs.\n* Support for arbitrary shell commands.\n* Constant feedback about the benchmark progress and current estimates.\n* Warmup runs can be executed before the actual benchmark.\n* Cache-clearing commands can be set up before each timing run.\n* Statistical outlier detection to detect interference from other programs and caching effects.\n* Export results to various formats: CSV, JSON, Markdown, AsciiDoc.\n* Parameterized benchmarks (e.g. vary the number of threads).\n* Cross-platform\n\n## Usage\n\n### Basic benchmark\n\nTo run a benchmark, you can simply call `hyperfine <command>...`. The argument(s) can be any\nshell command. For example:\n``` bash\nhyperfine 'sleep 0.3'\n```\n\nHyperfine will automatically determine the number of runs to perform for each command. By default,\nit will perform *at least* 10 benchmarking runs. To change this, you can use the `-m`/`--min-runs`\noption:\n``` bash\nhyperfine --min-runs 5 'sleep 0.2' 'sleep 3.2'\n```\n\n### Warmup runs and preparation commands\n\nIf the program execution time is limited by disk I/O, the benchmarking results can be heavily\ninfluenced by disk caches and whether they are cold or warm.\n\nIf you want to run the benchmark on a warm cache, you can use the `-w`/`--warmup` option to perform\na certain number of program executions before the actual benchmark:\n``` bash\nhyperfine --warmup 3 'grep -R TODO *'\n```\n\nConversely, if you want to run the benchmark for a cold cache, you can use the `-p`/`--prepare`\noption to run a special command before *each* timing run. For example, to clear harddisk caches\non Linux, you can run\n``` bash\nsync; echo 3 | sudo tee /proc/sys/vm/drop_caches\n```\nTo use this specific command with Hyperfine, call `sudo -v` to temporarily gain sudo permissions\nand then call:\n``` bash\nhyperfine --prepare 'sync; echo 3 | sudo tee /proc/sys/vm/drop_caches' 'grep -R TODO *'\n```\n\n### Parameterized benchmarks\n\nIf you want to run a benchmark where only a single parameter is varied (say, the number of\nthreads), you can use the `-P`/`--parameter-scan` option and call:\n``` bash\nhyperfine --prepare 'make clean' --parameter-scan num_threads 1 12 'make -j {num_threads}'\n```\nThis also works with decimal numbers. The `-D`/`--parameter-step-size` option can be used\nto control the step size:\n``` bash\nhyperfine --parameter-scan delay 0.3 0.7 -D 0.2 'sleep {delay}'\n```\nThis runs `sleep 0.3`, `sleep 0.5` and `sleep 0.7`.\n\n### Export results\n\nHyperfine has multiple options for exporting benchmark results: CSV, JSON, Markdown (see `--help`\ntext for details). To export results to Markdown, for example, you can use the `--export-markdown`\noption that will create tables like this:\n\n| Command | Mean [s] | Min [s] | Max [s] | Relative |\n|:---|---:|---:|---:|---:|\n| `find . -iregex '.*[0-9]\\.jpg$'` | 2.275 \u00b1 0.046 | 2.243 | 2.397 | 9.79 \u00b1 0.22 |\n| `find . -iname '*[0-9].jpg'` | 1.427 \u00b1 0.026 | 1.405 | 1.468 | 6.14 \u00b1 0.13 |\n| `fd -HI '.*[0-9]\\.jpg$'` | 0.232 \u00b1 0.002 | 0.230 | 0.236 | 1.00 |\n\nThe JSON output is useful if you want to analyze the benchmark results in more detail. See the\n[`scripts/`](https://github.com/sharkdp/hyperfine/tree/master/scripts) folder for some examples.", "updated": "2024-03-23T14:48:29Z", "galleryUrl": "https://community.chocolatey.org/packages/hyperfine/1.18.0", "abuseUrl": "https://community.chocolatey.org/package/ReportAbuse/hyperfine/1.18.0", "licenseUrl": "https://github.com/sharkdp/hyperfine/blob/v1.18.0/LICENSE-MIT", "packageName": "hyperfine", "displayName": "hyperfine", "summary": "A command-line benchmarking tool", "version": "1.18.0", "icon": "", "author": "David Peter", "downloadCount": 5466, "tags": ["command-line", "tool", "benchmark", "rust", "cli", "terminal", "foss"]}