{"description": "Codac is a library providing tools for constraint programming over reals, trajectories and sets.\n\n## Quick start\n- After [installing Chocolatey](https://chocolatey.org/install), run `choco install -y codac cmake make qtcreator` in PowerShell and then launch Qt Creator and choose Open Project, open `test_codac\\CMakelists.txt` (get the folder from https://www.ensta-bretagne.fr/lebars/Share/test_codac.zip), ensure Desktop is selected and click Configure Project, wait 10 s then click on the big bottom green Run button, finally check that \"My first tube:Tube [0, 10]\" appears.\n- Optionally, download and run https://github.com/ENSTABretagneRobotics/VIBES/releases/download/0.2.3/VIBes-0.2.3-win32.exe before running the project, and check that a tube appears in VIBes window.\n\n## Troubleshooting\n- Check that all the packages and their dependencies were installed, if one failed (e.g. due to network-related errors) try to reinstall it using `--force` or try a previous version...\n- 32 bit versions of Qt Creator do not seem available any more, see https://github.com/AdmiringWorm/chocolatey-packages/issues/362.\n- If multiple compilers are already installed, Qt Creator might show multiple possibilities in the Configure Project panel, ensure you choose one compatible with https://chocolatey.org/packages/codac#dependencies.\n\n## Package parameters\nThe following package parameters can be set:\n- `/url:URL` - Will install the specified binary package (e.g. built for Visual Studio), see versions from https://github.com/codac-team/codac/releases (the Windows `PATH` might need to be updated manually with e.g. `C:\\ProgramData\\chocolatey\\lib\\ibex\\bin`, etc.). By default, only the MinGW libraries compatible with the corresponding MinGW Chocolatey package dependency are installed. Use the standard parameter `choco install --ignore-dependencies ...` to avoid installing the default MinGW and IBEX Chocolatey package dependencies if needed (you might want to install manually [IBEX](https://community.chocolatey.org/packages/ibex) package with the corresponding parameters, as well as the corresponding compiler and the Eigen package).\n- `/urlX:URL` - Same as above, with X in [1,99], except this will not disable the installation of the MinGW libraries compatible with the corresponding MinGW Chocolatey package dependency.\n- `/InstallDir:INSTALLDIR` - Installation directory.\n- `/NoPath` - Will not try to update Windows `PATH`.\n- `/NoRegistry` - Will not try to update Windows registry.\nTo pass package parameters, use `--params \"''\"` (e.g. `choco install codac --params \"'/NoPath /NoRegistry'\"`), and to install another binary package, try e.g.\n```\nchoco install -y --ignore-dependencies codac --params \"'/url:https://github.com/codac-team/codac/releases/download/v1.5.2/codac_x64_vc17.zip'\"\n```", "updated": "2024-03-20T17:33:26Z", "galleryUrl": "https://community.chocolatey.org/packages/codac/1.5.2", "abuseUrl": "https://community.chocolatey.org/package/ReportAbuse/codac/1.5.2", "licenseUrl": "https://github.com/codac-team/codac/blob/master/COPYING.LESSER", "packageName": "codac", "displayName": "Codac", "summary": "Codac is a library providing tools for constraint programming over reals, trajectories and sets.", "version": "1.5.2", "icon": "", "author": "Codac Team", "downloadCount": 905, "tags": ["codac", "tube", "interval", "contraints", "contractor", "processing", "programming", "library", "C++", "CPP"]}